{"remainingRequest":"C:\\Users\\usuario\\Documents\\GitHub\\pedidos\\angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\usuario\\Documents\\GitHub\\pedidos\\angular\\node_modules\\@ngx-progressbar\\core\\fesm5\\ngx-progressbar-core.js","dependencies":[{"path":"C:\\Users\\usuario\\Documents\\GitHub\\pedidos\\angular\\node_modules\\@ngx-progressbar\\core\\fesm5\\ngx-progressbar-core.js","mtime":499162500000},{"path":"C:\\Users\\usuario\\Documents\\GitHub\\pedidos\\angular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541191335032},{"path":"C:\\Users\\usuario\\Documents\\GitHub\\pedidos\\angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,rxjs,rxjs_operators,_angular_core,_angular_common PURE_IMPORTS_END */\nimport { __assign, __read } from 'tslib';\nimport { Subject, BehaviorSubject, timer, of, combineLatest, EMPTY } from 'rxjs';\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { InjectionToken, Injectable, Inject, Optional, Component, Input, Output, ChangeDetectionStrategy, EventEmitter, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgProgressRef = /** @class */ /*@__PURE__*/ (function () {\n    function NgProgressRef(customConfig) {\n        var _this = this;\n        this._state = { active: false, value: 0 };\n        /**\n         * Stream that increments and updates progress state\n         */\n        this._trickling$ = new Subject();\n        /**\n         * Stream that emits when progress state is changed\n         */\n        this.state$ = new BehaviorSubject(this._state);\n        /**\n         * Stream that emits when config is changed\n         */\n        this.config$ = new Subject();\n        combineLatest(this._trickling$, this.config$).pipe(debounce(function (_a) {\n            var _b = __read(_a, 2), start = _b[0], config = _b[1];\n            return timer(start ? _this._config.debounceTime : 0);\n        }), switchMap(function (_a) {\n            var _b = __read(_a, 2), start = _b[0], config = _b[1];\n            return start ? _this._trickling(config) : _this._complete(config);\n        })).subscribe();\n        this.setConfig(customConfig);\n    }\n    Object.defineProperty(NgProgressRef.prototype, \"isStarted\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._state.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgProgressRef.prototype, \"started\", {\n        /** Progress start event */\n        get: /**\n         * Progress start event\n         * @return {?}\n         */ function () {\n            return this.state$.pipe(map(function (state) { return state.active; }), distinctUntilChanged(), filter(function (active) { return active; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgProgressRef.prototype, \"completed\", {\n        /** Progress ended event */\n        get: /**\n         * Progress ended event\n         * @return {?}\n         */ function () {\n            return this.state$.pipe(map(function (state) { return state.active; }), distinctUntilChanged(), filter(function (active) { return !active; }), skip(1));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgProgressRef.prototype.start = /**\n     * @return {?}\n     */\n        function () {\n            this._trickling$.next(true);\n        };\n    /**\n     * @return {?}\n     */\n    NgProgressRef.prototype.complete = /**\n     * @return {?}\n     */\n        function () {\n            this._trickling$.next(false);\n        };\n    /**\n     * @param {?=} amount\n     * @return {?}\n     */\n    NgProgressRef.prototype.inc = /**\n     * @param {?=} amount\n     * @return {?}\n     */\n        function (amount) {\n            var /** @type {?} */ n = this._state.value;\n            if (!this.isStarted) {\n                this.start();\n            }\n            else {\n                if (typeof amount !== 'number') {\n                    amount = this._config.trickleFunc(n);\n                }\n                this.set(n + amount);\n            }\n        };\n    /**\n     * @param {?} n\n     * @return {?}\n     */\n    NgProgressRef.prototype.set = /**\n     * @param {?} n\n     * @return {?}\n     */\n        function (n) {\n            this._setState({ value: this._clamp(n), active: true });\n        };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NgProgressRef.prototype.setConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            this._config = __assign({}, this._config, config);\n            this.config$.next(this._config);\n        };\n    /**\n     * Meant to be used internally and not by user directly\n     * Users should use NgProgressManager.destroy(id) instead\n     */\n    /**\n     * Meant to be used internally and not by user directly\n     * Users should use NgProgressManager.destroy(id) instead\n     * @return {?}\n     */\n    NgProgressRef.prototype.destroy = /**\n     * Meant to be used internally and not by user directly\n     * Users should use NgProgressManager.destroy(id) instead\n     * @return {?}\n     */\n        function () {\n            this._trickling$.complete();\n            this.state$.complete();\n            this.config$.complete();\n        };\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    NgProgressRef.prototype._setState = /**\n     * @param {?} state\n     * @return {?}\n     */\n        function (state) {\n            this._state = __assign({}, this._state, state);\n            this.state$.next(this._state);\n        };\n    /**\n     * Clamps a value to be between min and max\n     * @param {?} n\n     * @return {?}\n     */\n    NgProgressRef.prototype._clamp = /**\n     * Clamps a value to be between min and max\n     * @param {?} n\n     * @return {?}\n     */\n        function (n) {\n            return Math.max(this._config.min, Math.min(this._config.max, n));\n        };\n    /**\n     * Keeps incrementing the progress\n     * @param {?} config\n     * @return {?}\n     */\n    NgProgressRef.prototype._trickling = /**\n     * Keeps incrementing the progress\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            var _this = this;\n            if (!this.isStarted) {\n                this.set(this._config.min);\n            }\n            return timer(0, config.trickleSpeed).pipe(tap(function () { return _this.inc(); }));\n        };\n    /**\n     * Completes then resets the progress\n     * @param {?} config\n     * @return {?}\n     */\n    NgProgressRef.prototype._complete = /**\n     * Completes then resets the progress\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            var _this = this;\n            return !this.isStarted ? of({}) : of({}).pipe(\n            // Completes the progress\n            tap(function () { return _this._setState({ value: 100 }); }), \n            // Hides the progress bar after a tiny delay\n            delay(config.speed * 1.7), tap(function () { return _this._setState({ active: false }); }), \n            // Resets the progress state\n            delay(config.speed), tap(function () { return _this._setState({ value: 0 }); }));\n        };\n    return NgProgressRef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ CONFIG = /*@__PURE__*/ new InjectionToken('config');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ɵ0 = function (n) {\n    if (n >= 0 && n < 20)\n        return 10;\n    if (n >= 20 && n < 50)\n        return 4;\n    if (n >= 50 && n < 80)\n        return 2;\n    if (n >= 80 && n < 99)\n        return 0.5;\n    return 0;\n};\nvar /** @type {?} */ defaultConfig = {\n    meteor: true,\n    spinner: true,\n    thick: false,\n    ease: 'linear',\n    spinnerPosition: 'right',\n    direction: 'ltr+',\n    color: '#1B95E0',\n    max: 100,\n    min: 8,\n    speed: 200,\n    trickleSpeed: 300,\n    debounceTime: 0,\n    trickleFunc: ɵ0\n};\nvar NgProgress = /** @class */ /*@__PURE__*/ (function () {\n    function NgProgress(config) {\n        /**\n         * Stores NgProgressRef instances\n         */\n        this._instances = {};\n        this.config = __assign({}, defaultConfig, config);\n    }\n    /**\n     * Returns NgProgressRef by ID\n     */\n    /**\n     * Returns NgProgressRef by ID\n     * @param {?=} id\n     * @param {?=} config\n     * @return {?}\n     */\n    NgProgress.prototype.ref = /**\n     * Returns NgProgressRef by ID\n     * @param {?=} id\n     * @param {?=} config\n     * @return {?}\n     */\n        function (id, config) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                return this._instances[id];\n            }\n            else {\n                config = __assign({}, this.config, config);\n                return this._instances[id] = new NgProgressRef(config);\n            }\n        };\n    /**\n     * @param {?} config\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.setConfig = /**\n     * @param {?} config\n     * @param {?=} id\n     * @return {?}\n     */\n        function (config, id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].setConfig(config);\n            }\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.start = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].start();\n            }\n        };\n    /**\n     * @param {?} n\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.set = /**\n     * @param {?} n\n     * @param {?=} id\n     * @return {?}\n     */\n        function (n, id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].set(n);\n            }\n        };\n    /**\n     * @param {?=} n\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.inc = /**\n     * @param {?=} n\n     * @param {?=} id\n     * @return {?}\n     */\n        function (n, id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].inc(n);\n            }\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.complete = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].complete();\n            }\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.isStarted = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.started = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : EMPTY;\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.completed = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].completed : EMPTY;\n        };\n    /**\n     * @param {?=} id\n     * @return {?}\n     */\n    NgProgress.prototype.destroy = /**\n     * @param {?=} id\n     * @return {?}\n     */\n        function (id) {\n            if (id === void 0) {\n                id = 'root';\n            }\n            if (this._instances[id] instanceof NgProgressRef) {\n                this._instances[id].destroy();\n                this._instances[id] = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgProgress.prototype.destroyAll = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            Object.keys(this._instances).map(function (key) {\n                _this._instances[key].destroy();\n                _this._instances[key] = null;\n            });\n        };\n    return NgProgress;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgProgressComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NgProgressComponent(_ngProgress) {\n        this._ngProgress = _ngProgress;\n        /**\n         * Creates a new instance if id is not already exists\n         */\n        this.id = 'root';\n        /**\n         * Initializes inputs from the global config\n         */\n        this.spinnerPosition = this._ngProgress.config.spinnerPosition;\n        this.direction = this._ngProgress.config.direction;\n        this.ease = this._ngProgress.config.ease;\n        this.color = this._ngProgress.config.color;\n        this.meteor = this._ngProgress.config.meteor;\n        this.spinner = this._ngProgress.config.spinner;\n        this.thick = this._ngProgress.config.thick;\n        this.max = this._ngProgress.config.max;\n        this.min = this._ngProgress.config.min;\n        this.speed = this._ngProgress.config.speed;\n        this.trickleSpeed = this._ngProgress.config.trickleSpeed;\n        this.trickleFunc = this._ngProgress.config.trickleFunc;\n        this.debounceTime = this._ngProgress.config.debounceTime;\n        this.started = new EventEmitter();\n        this.completed = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgProgressComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            if (this.progressRef instanceof NgProgressRef) {\n                // Update progress bar config when inputs change\n                this.progressRef.setConfig({\n                    max: (this.max > 0 && this.max <= 100) ? this.max : 100,\n                    min: (this.min < 100 && this.min >= 0) ? this.min : 0,\n                    speed: this.speed,\n                    trickleSpeed: this.trickleSpeed,\n                    trickleFunc: this.trickleFunc,\n                    debounceTime: this.debounceTime\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgProgressComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Get progress bar service instance\n            this.progressRef = this._ngProgress.ref(this.id, {\n                max: this.max,\n                min: this.min,\n                speed: this.speed,\n                trickleSpeed: this.trickleSpeed,\n                debounceTime: this.debounceTime\n            });\n            this.state$ = this.progressRef.state$.pipe(map(function (state) {\n                return ({\n                    active: state.active,\n                    transform: \"translate3d(\" + state.value + \"%,0,0)\"\n                });\n            }));\n            /** Subscribes to started and completed events when user used them */\n            if (this.started.observers.length) {\n                this._started$ = this.progressRef.started.subscribe(function () { return _this.started.emit(); });\n            }\n            if (this.completed.observers.length) {\n                this._completed$ = this.progressRef.completed.subscribe(function () { return _this.completed.emit(); });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgProgressComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._started$) {\n                this._started$.unsubscribe();\n            }\n            if (this._completed$) {\n                this._completed$.unsubscribe();\n            }\n            this._ngProgress.destroy(this.id);\n        };\n    /**\n     * @return {?}\n     */\n    NgProgressComponent.prototype.start = /**\n     * @return {?}\n     */\n        function () {\n            this.progressRef.start();\n        };\n    /**\n     * @return {?}\n     */\n    NgProgressComponent.prototype.complete = /**\n     * @return {?}\n     */\n        function () {\n            this.progressRef.complete();\n        };\n    /**\n     * @param {?=} n\n     * @return {?}\n     */\n    NgProgressComponent.prototype.inc = /**\n     * @param {?=} n\n     * @return {?}\n     */\n        function (n) {\n            this.progressRef.inc(n);\n        };\n    /**\n     * @param {?} n\n     * @return {?}\n     */\n    NgProgressComponent.prototype.set = /**\n     * @param {?} n\n     * @return {?}\n     */\n        function (n) {\n            this.progressRef.set(n);\n        };\n    Object.defineProperty(NgProgressComponent.prototype, \"isStarted\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.progressRef.isStarted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NgProgressComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction NgProgressFactory(config) {\n    return new NgProgress(config);\n}\nvar NgProgressModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgProgressModule() {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    NgProgressModule.forRoot = /**\n     * @param {?=} config\n     * @return {?}\n     */\n        function (config) {\n            return {\n                ngModule: NgProgressModule,\n                providers: [\n                    { provide: CONFIG, useValue: config },\n                    {\n                        provide: NgProgress,\n                        useFactory: NgProgressFactory,\n                        deps: [CONFIG]\n                    }\n                ]\n            };\n        };\n    return NgProgressModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { NgProgressFactory, NgProgressModule, NgProgressComponent, NgProgressRef, NgProgress, CONFIG as ɵa };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}